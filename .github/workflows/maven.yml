# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [closed]
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
     contents: read
     packages: write

    steps:
    - name: clone repo
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        
    - name: Build with Maven
      run: mvn clean install -DskipTests
      
    - name: create docker image
      run: docker build -t kermtuncr19/banking_app:latest .

    - name: login on dockerhub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: push dockerhub
      run: docker push kermtuncr19/banking_app:latest

    - name: Create pem file
      run: echo "${{ secrets.AWS_KEY }}" > key.pem && chmod 400 key.pem

    - name: copy jar file to ec2
      run: |
          scp -i key.pem -o StrictHostKeyChecking=no target/awsproject-0.0.1-SNAPSHOT.jar ${{ secrets.AWS_USER}}@${{ secrets.AWS_HOST}}:/home/${{ secrets.AWS_USER}}/

      env:
        GITHUB_TOKEN: ${{github.token}}

  
